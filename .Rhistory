levels(discRNA[, i]) <- c(-1, 0, 1)
discRNA[, i] <- as.factor(discRNA[, i])
}
# Transform RNA data frame.
discRNA <- t(discRNA)
# Rename column names to match timepoint and treatment.
colnames(discRNA) <- paste(discRNA[dim(discRNA)[1] - 1,],
discRNA[dim(discRNA)[1],], sep = "")
# Read in cluster classification.
cl <- read.csv(file = "modules.csv", row.names = 1)
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,1]) - sum(is.na(cl[,1]))), 1]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module, M1.
m1 <- gather(c1, Gene, M1, -TP, -Trmt)
# Count number of values per treatment and time point.
mCounts <- as.data.frame(table(m1[, c(1, 2, 4)]))
# Order mCounts dataframe by Timepoint, treatment, and module value.
mCounts <- mCounts[with(mCounts, order(TP, Trmt, M1)), ]
# Add column for proportion per timepoint, treatment, and module value.
mCounts$Prop <- mCounts$Freq/((length(cl[,1]) - sum(is.na(cl[,1])))*2)
# Create a column with the number of counts proportional to 12.
mCounts$twelve <- mCounts$Prop * 12
# Round the counts proportional to 12.
mCounts$round <- round(mCounts$twelve)
# Convert to data.table.
mCounts <- as.data.table(mCounts)
# Add a column that counts the total in round.
mCounts <- mCounts[, total := sum(round), by = list(TP, Trmt)]
# Convert to dataframe for easier updates.
mCounts <- as.data.frame(mCounts)
# If total count is 13, round to nearest 1/2 number and then round that.
mCounts[mCounts$total == 13, 'round'] <- round(round(mCounts[mCounts$total == 13, 'twelve']/0.5) *.5)
# Convert back to data table for easy updating.
mCounts <- as.data.table(mCounts)
# Update the total column with new rounding.
mCounts <- mCounts[, total := sum(round), by = list(TP, Trmt)]
# Add a column that identifies the max proportion per treatment and time point.
mCounts <- mCounts[, max := max(Prop), by = list(TP, Trmt)]
# Convert back to dataframe for easy subsetting.
mCounts <- as.data.frame(mCounts)
# Add 1 to the count with the max proportion.
mCounts[mCounts$total == 11 & mCounts$Prop == mCounts$max, 'round'] <-
mCounts[mCounts$total == 11
& mCounts$Prop == mCounts$max, 'round'] + 1
# Convert back to data table for easy updating.
mCounts <- as.data.table(mCounts)
# Update the total column with new rounding.
mCounts <- mCounts[, total := sum(round), by = list(TP, Trmt)]
# Extract the round column as a dataframe.
mod <- data.frame(TP = mCounts$TP, Trmt = mCounts$Trmt,
Value = mCounts$M1, M1 = mCounts$round)
# Remove unnecessary dataframes.
rm(m1)
rm(c1)
rm(mCounts)
############ TO DO: Update loop to perform a similar function as above.
# Loop through remaining clusters.
for (i in 2:(dim(cl)[2]))
{
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,i]) - sum(is.na(cl[,i]))), i]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module
module <- gather(c1, Gene, M, -TP, -Trmt)
# Order module dataframe by Timepoint and int.
module <- module[with(module, order(TP, Trmt)), ]
# Count number of values per treatment and time point.
counts <- as.data.frame(table(module[, c(1, 2, 4)]))
# Order mCounts dataframe by Timepoint, treatment, and module value.
counts <- counts[with(counts, order(TP, Trmt, M)), ]
# Add column for proportion per timepoint, treatment, and module value.
counts$Prop <- counts$Freq/((length(cl[,i]) - sum(is.na(cl[,i])))*2)
# Create a column with the number of counts proportional to 12.
counts$twelve <- counts$Prop * 12
# Round the counts proportional to 12.
counts$round <- round(counts$twelve)
# Convert to data.table.
counts <- as.data.table(counts)
# Add a column that counts the total in round.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# Convert to dataframe for easier updates.
counts <- as.data.frame(counts)
# If total count is 13, round to nearest 1/2 number and then round that.
counts[counts$total == 13, 'round'] <- round(round(counts[counts$total == 13, 'twelve']/0.5) *.5)
# Convert back to data table for easy updating.
counts <- as.data.table(counts)
# Update the total column with new rounding.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# Add a column that identifies the max proportion per treatment and time point.
counts <- counts[, max := max(Prop), by = list(TP, Trmt)]
# Add a column that identifies the second highest proportion per treatment
# and time point.
counts <- counts[, max2 := as.numeric(Prop)][, max2 := sort(Prop, T)[2], by = list(TP, Trmt)]
# Add a column that identifies the min proportion per treatment and time point.
counts <- counts[, min := min(Prop), by = list(TP, Trmt)]
# Convert back to dataframe for easy subsetting.
counts <- as.data.frame(counts)
# Add 1 to the count with the max proportion.
counts[counts$total <= 11 & counts$Prop == counts$max, 'round'] <-
counts[counts$total <= 11
& counts$Prop == counts$max, 'round'] + 1
# Convert back to data table for easy updating.
counts <- as.data.table(counts)
# Update the total column with new rounding.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# Convert back to dataframe for easy subsetting.
counts <- as.data.frame(counts)
# Add 1 to the count with the 2nd highest proportion if
# still less than 12.
counts[counts$total <= 11 & counts$Prop == counts$max2, 'round'] <-
counts[counts$total <= 11
& counts$Prop == counts$max2, 'round'] + 1
# Convert back to data table for easy updating.
counts <- as.data.table(counts)
# Update the total column with new rounding.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# If there are any column totals of 13, subtract one from the
# value with the lowest proportion.
counts[counts$total == 13 & counts$Prop == counts$min, 'round'] <-
counts[counts$total == 13
& counts$Prop == counts$min, 'round'] - 1
# Convert back to data table for easy updating.
counts <- as.data.table(counts)
# Update the total column with new rounding.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# Add 1 to the count with the highest proportion if
# still less than 12.
counts[counts$total <= 11 & counts$Prop == counts$max, 'round'] <-
counts[counts$total <= 11
& counts$Prop == counts$max, 'round'] + 1
# Bind round column to mod dataframe.
mod <- cbind(mod, counts$round)
mod <- cbind(mod, counts$total)
}
View(mod)
rm(c1)
rm(i)
rm(cl)
rm(discRNA)
rm(module)
colnames(mod)[5:dim(mod)[2]] <- paste("M", 2:58, sep = "")
RNAmod <- as.data.frame(sapply(mod[, 4:dim(mod)[2]], function(x) rep(mod$Value, times = x)))
sapply(mod[, 4:dim(mod)[2]], function(x) rep(mod$Value, times = x))
# Read in RNAseq data.
RNA <- read.csv(file = "largeDE.csv", row.names = 1)
## Transpose data.
RNA <- t(RNA)
# Convert to data.frame.
RNA <- as.data.frame(RNA)
# Discretize the data.
discRNA <- discretize(RNA, method = "quantile", breaks = 3)
# Split rownames into Treatment/Timepoint and Replicate.
rnaNames <- str_split_fixed(rownames(RNA), '_', 2)
# Create a Timepoint column.
discRNA$Timepoint <- as.numeric(str_split_fixed(rnaNames[, 1], '', 2)[, 2])
# Create a treatment column named int.
discRNA$int <- as.factor(str_split_fixed(rnaNames[, 1], '', 2)[, 1])
# Remove rnaNames vector and RNA dataframe.
rm(rnaNames)
rm(RNA)
# Order RNA dataframe by Timepoint and int.
discRNA <- discRNA[with(discRNA, order(Timepoint, int)), ]
# Convert data intervals to -1, 0, and 1 representing low, medium, and high.
for (i in 1:(dim(discRNA)[2] - 2)){
levels(discRNA[, i]) <- c(-1, 0, 1)
discRNA[, i] <- as.factor(discRNA[, i])
}
# Transform RNA data frame.
discRNA <- t(discRNA)
# Rename column names to match timepoint and treatment.
colnames(discRNA) <- paste(discRNA[dim(discRNA)[1] - 1,],
discRNA[dim(discRNA)[1],], sep = "")
# Read in cluster classification.
cl <- read.csv(file = "modules.csv", row.names = 1)
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,1]) - sum(is.na(cl[,1]))), 1]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module, M1.
m1 <- gather(c1, Gene, M1, -TP, -Trmt)
# Count number of values per treatment and time point.
mCounts <- as.data.frame(table(m1[, c(1, 2, 4)]))
# Order mCounts dataframe by Timepoint, treatment, and module value.
mCounts <- mCounts[with(mCounts, order(TP, Trmt, M1)), ]
# Add column for proportion per timepoint, treatment, and module value.
mCounts$Prop <- mCounts$Freq/((length(cl[,1]) - sum(is.na(cl[,1])))*2)
# Create a column with the number of counts proportional to 12.
mCounts$twelve <- mCounts$Prop * 12
# Round the counts proportional to 12.
mCounts$round <- round(mCounts$twelve)
# Convert to data.table.
mCounts <- as.data.table(mCounts)
# Add a column that counts the total in round.
mCounts <- mCounts[, total := sum(round), by = list(TP, Trmt)]
# Convert to dataframe for easier updates.
mCounts <- as.data.frame(mCounts)
# If total count is 13, round to nearest 1/2 number and then round that.
mCounts[mCounts$total == 13, 'round'] <- round(round(mCounts[mCounts$total == 13, 'twelve']/0.5) *.5)
# Convert back to data table for easy updating.
mCounts <- as.data.table(mCounts)
# Update the total column with new rounding.
mCounts <- mCounts[, total := sum(round), by = list(TP, Trmt)]
# Add a column that identifies the max proportion per treatment and time point.
mCounts <- mCounts[, max := max(Prop), by = list(TP, Trmt)]
# Convert back to dataframe for easy subsetting.
mCounts <- as.data.frame(mCounts)
# Add 1 to the count with the max proportion.
mCounts[mCounts$total == 11 & mCounts$Prop == mCounts$max, 'round'] <-
mCounts[mCounts$total == 11
& mCounts$Prop == mCounts$max, 'round'] + 1
# Convert back to data table for easy updating.
mCounts <- as.data.table(mCounts)
# Update the total column with new rounding.
mCounts <- mCounts[, total := sum(round), by = list(TP, Trmt)]
# Extract the round column as a dataframe.
mod <- data.frame(TP = mCounts$TP, Trmt = mCounts$Trmt,
Value = mCounts$M1, M1 = mCounts$round)
# Remove unnecessary dataframes.
rm(m1)
rm(c1)
rm(mCounts)
############ TO DO: Update loop to perform a similar function as above.
# Loop through remaining clusters.
for (i in 2:(dim(cl)[2]))
{
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,i]) - sum(is.na(cl[,i]))), i]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module
module <- gather(c1, Gene, M, -TP, -Trmt)
# Order module dataframe by Timepoint and int.
module <- module[with(module, order(TP, Trmt)), ]
# Count number of values per treatment and time point.
counts <- as.data.frame(table(module[, c(1, 2, 4)]))
# Order mCounts dataframe by Timepoint, treatment, and module value.
counts <- counts[with(counts, order(TP, Trmt, M)), ]
# Add column for proportion per timepoint, treatment, and module value.
counts$Prop <- counts$Freq/((length(cl[,i]) - sum(is.na(cl[,i])))*2)
# Create a column with the number of counts proportional to 12.
counts$twelve <- counts$Prop * 12
# Round the counts proportional to 12.
counts$round <- round(counts$twelve)
# Convert to data.table.
counts <- as.data.table(counts)
# Add a column that counts the total in round.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# Convert to dataframe for easier updates.
counts <- as.data.frame(counts)
# If total count is 13, round to nearest 1/2 number and then round that.
counts[counts$total == 13, 'round'] <- round(round(counts[counts$total == 13, 'twelve']/0.5) *.5)
# Convert back to data table for easy updating.
counts <- as.data.table(counts)
# Update the total column with new rounding.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# Add a column that identifies the max proportion per treatment and time point.
counts <- counts[, max := max(Prop), by = list(TP, Trmt)]
# Add a column that identifies the second highest proportion per treatment
# and time point.
counts <- counts[, max2 := as.numeric(Prop)][, max2 := sort(Prop, T)[2], by = list(TP, Trmt)]
# Add a column that identifies the min proportion per treatment and time point.
counts <- counts[, min := min(Prop), by = list(TP, Trmt)]
# Convert back to dataframe for easy subsetting.
counts <- as.data.frame(counts)
# Add 1 to the count with the max proportion.
counts[counts$total <= 11 & counts$Prop == counts$max, 'round'] <-
counts[counts$total <= 11
& counts$Prop == counts$max, 'round'] + 1
# Convert back to data table for easy updating.
counts <- as.data.table(counts)
# Update the total column with new rounding.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# Convert back to dataframe for easy subsetting.
counts <- as.data.frame(counts)
# Add 1 to the count with the 2nd highest proportion if
# still less than 12.
counts[counts$total <= 11 & counts$Prop == counts$max2, 'round'] <-
counts[counts$total <= 11
& counts$Prop == counts$max2, 'round'] + 1
# Convert back to data table for easy updating.
counts <- as.data.table(counts)
# Update the total column with new rounding.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# If there are any column totals of 13, subtract one from the
# value with the lowest proportion.
counts[counts$total == 13 & counts$Prop == counts$min, 'round'] <-
counts[counts$total == 13
& counts$Prop == counts$min, 'round'] - 1
# Convert back to data table for easy updating.
counts <- as.data.table(counts)
# Update the total column with new rounding.
counts <- counts[, total := sum(round), by = list(TP, Trmt)]
# Add 1 to the count with the highest proportion if
# still less than 12.
counts[counts$total <= 11 & counts$Prop == counts$max, 'round'] <-
counts[counts$total <= 11
& counts$Prop == counts$max, 'round'] + 1
# Bind round column to mod dataframe.
mod <- cbind(mod, counts$round)
}
# Remove unneccesary dataframes.
rm(c1)
rm(i)
rm(cl)
rm(discRNA)
rm(module)
# Rename modules in mod dataframe.
colnames(mod)[5:dim(mod)[2]] <- paste("M", 2:58, sep = "")
RNAmod <- as.data.frame(sapply(mod[, 4:dim(mod)[2]], function(x) rep(mod$Value, times = x)))
View(RNAmod)
Pheno <- read.csv(file = "PhenoBrassicaImp.csv", row.names = 1)
colnames(Pheno)[8] <- "SM"
Pheno$TOD <- rep(c(7, 11, 15, 19, 23, 3), each = 24, 2)
phenoDisc <- discretize(Pheno[, c(3, 4, 6, 7, 8)],
method = "interval",
breaks = c(5, 5, 5, 5, 5))
library(arules)
fluor <- discretize(Pheno[, 5], method = "cluster")
detach("package:arules", unload=TRUE)
phenoDisc$fluor <- fluor
phenoDisc$INT <- as.factor(Pheno$Treatment)
phenoDisc$TP <- as.factor(Pheno$Timepoint)
phenoDisc <- phenoDisc[with(phenoDisc, order(TP, INT)), ]
rnaPheno <- cbind(phenoDisc, RNAmod)
rm(phenoDisc)
rm(Pheno)
rnaPheno$Trmt <- NULL
rnaPheno$INT <- NULL
rnaPheno$TP <- NULL
rnaPheno$TP <- NULL
View(rnaPheno)
wh <- data.frame(from = c("SM", "gs", "Photo", "Starch", "gs"),
to = c("gs", "Photo", "fluor", "NSC", "Starch"))
bl <- tiers2blacklist(list(colnames(rnaPheno)[5],
colnames(rnaPheno)[-5]))
bn <- suppressWarnings(tabu(training, score = "bde",
iss = 10, tabu = 50))
bn <- suppressWarnings(tabu(rnaPheno, score = "bde",
iss = 10, tabu = 50))
plot(bn)
bn <- rsmax2(rnaPheno, restrict = "aracne", whitelist = wh,
blacklist = bl,
maximize = "tabu", score = "bde",
maximize.args = list(iss = 15))
plot(bn)
?bn.fit
bnParam <- bn.fit(bn, rnaPheno, method = "bayes")
bnParam$gs
bnParam$Photo
bnParam$Starch
bnParam$SM
bnParam$fluor
children(bnParam$Photo)
?children
children(bnParam, Photo)
children(bnParam, bnParam$Photo)
children(bnParam, "Photo")
children(bnParam, "gs")
wh <- data.frame(from = c("SM", "gs", "Photo", "Starch"),
to = c("gs", "Photo", "fluor", "NSC"))
bl <- tiers2blacklist(list(colnames(rnaPheno)[5],
colnames(rnaPheno)[-5]))
bn <- rsmax2(rnaPheno, restrict = "aracne", whitelist = wh,
blacklist = bl,
maximize = "tabu", score = "bde",
maximize.args = list(iss = 15))
plot(bn)
bnParam <- bn.fit(bn, rnaPheno, method = "bayes")
children(bnParam, "gs")
children(bnParam, "Photo")
parents(bnParam, "Photo")
parents(bnParam, "gs")
parents(bnParam, "SM")
parents(bnParam, "Starch")
parents(bnParam, "NSC")
children(bnParam, "gs")
children(bnParam, "Starch")
children(bnParam, "NSC")
children(bnParam, "SM")
bn <- rsmax2(rnaPheno, restrict = "aracne",
blacklist = bl,
maximize = "tabu", score = "bde",
maximize.args = list(iss = 15))
plot(bn)
children(bnParam, "SM")
children(bnParam, "NSC")
children(bnParam, "Starch")
children(bnParam, "gs")
parents(bnParam, "Photo")
children(bnParam, "Photo")
parents(bnParam, "Starch")
parents(bnParam, "gs")
mb(bnParam, "Photo")
children(bnParam, "Photo")
parents(bnParam, "Photo")
parents(bnParam, "M13")
parents(bnParam, "M22")
View(mod)
parents(bnParam, "M1")
write.csv(bn$arcs, "M58bn.csv")
mb(bnParam, "SM")
bn$arcs
bn$nodes
wh <- data.frame(from = c("SM", "Photo", "Starch"),
to = c("gs", "fluor", "NSC"))
bl <- tiers2blacklist(list(colnames(rnaPheno)[5],
colnames(rnaPheno)[-5]))
bn <- rsmax2(rnaPheno, restrict = "aracne",
blacklist = bl, whitelist = wh,
maximize = "tabu", score = "bde",
maximize.args = list(iss = 15))
plot(bn)
bn <- tabu(rnaPheno, score = "bde",
iss = 10, tabu = 50)
plot(bn)
bn <- tabu(rnaPheno, score = "aracne")
bn <- aracne(rnaPheno)
plot(bn)
bn <- rsmax2(rnaPheno, restrict = "aracne",
blacklist = bl, whitelist = wh,
maximize = "tabu", score = "bde",
maximize.args = list(iss = 15))
plot(bn)
mb(bnParam, "NSC")
mb(bnParam, "Starch")
mb(bnParam, "gs")
mb(bnParam, "Photo")
mb(bnParam, "SM")
mb(bnParam, "fluor")
?boot.strength
boot <- boot.strength(training, R = 500, algorithm = "rsmax2",
algorithm.args = list(restrict = "aracne",
blacklist = bl, whitelist = wh,
maximize = "tabu", score = "bde",
maximize.args = list(iss = 15)))
boot <- boot.strength(rnaPheno, R = 500, algorithm = "rsmax2",
algorithm.args = list(restrict = "aracne",
blacklist = bl, whitelist = wh,
maximize = "tabu", score = "bde",
maximize.args = list(iss = 15)))
boot[(boot$strength > 0.85) & (boot$direction >= 0.5), ]
avg.boot <- averaged.network(boot, threshold = 0.85)
plot(avg.boot)
mb(avg.boot, "fluor")
mb(avg.boot, "Photo")
mb(avg.boot, "gs")
mb(avg.boot, "SM")
mb(avg.boot, "Starch")
mb(avg.boot, "NSC")
boot <- boot.strength(rnaPheno, R = 500, algorithm = "rsmax2",
algorithm.args = list(restrict = "aracne",
blacklist = bl,
maximize = "tabu",
score = "bde",
maximize.args = list(iss = 15)))
warnings()
boot[(boot$strength > 0.85) & (boot$direction >= 0.5), ]
avg.boot <- averaged.network(boot, threshold = 0.85)
plot(avg.boot)
mb(avg.boot, "Photo")
mb(avg.boot, "gs")
mb(avg.boot, "fluor")
mb(avg.boot, "SM")
mb(avg.boot, "Starch")
avg.boot$arcs
View(RNAmod)
View(mod)
mod$M33
mod$M13
mod$M12
mod$M39
score(avg.boot)
score(avg.boot, rnaPheno, type = "bde")
wh <- data.frame(from = c("SM", "Photo", "Starch"),
to = c("gs", "fluor", "NSC"))
boot <- boot.strength(rnaPheno, R = 500, algorithm = "rsmax2",
algorithm.args = list(restrict = "aracne",
blacklist = bl, whitelist = wh,
maximize = "tabu",
score = "bde",
maximize.args = list(iss = 15)))
score(avg.boot, rnaPheno, type = "bde")
avg.boot$arcs
library(BHC)
library(bnlearn)
library(data.table)
library(stringr)
library(stringi)
RNA <- read.csv(file = "largeDE.csv", row.names = 1)
RNA <- as.data.frame(t(RNA))
discRNA <- discretize(RNA, method = "quantile", breaks = 3)
for (i in 1:dim(discRNA)[2]){
levels(discRNA[, i]) <- c(-1, 0, 1)
discRNA[, i] <- as.numeric(as.character(discRNA[, i]))
}
discRNA <- t(discRNA)
rm(RNA)
nDataItems <- nrow(discRNA)
nFeatures  <- ncol(discRNA)
itemLabels <- rownames(discRNA)
hct <- bhc(discRNA, itemLabels, numReps=2)
