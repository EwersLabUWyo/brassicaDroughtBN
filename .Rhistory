discRNA[, i] <- as.factor(discRNA[, i])
}
# Transform RNA data frame.
discRNA <- t(discRNA)
# Rename column names to match timepoint and treatment.
colnames(discRNA) <- paste(discRNA[dim(discRNA)[1] - 1,],
discRNA[dim(discRNA)[1],], sep = "")
# Read in cluster classification.
tr <- read.csv(file = "pg.csv")
# Rename column names to "variable" and "cluster."
colnames(tr) <- c("variable", "cluster")
# Remove phenotype variables.
ph <- c("Photo", "gs", "Fv.Fm.", "Starch", "NSC", "SM")
tr <- tr[-which(tr$variable %in% ph), ]
# Create empty matrix for storing clusters.
cl <- matrix(data = NA, nrow = dim(tr)[1], ncol = (max(unique(tr$cluster))))
colnames(cl) <- paste("c", 1:(max(unique(tr$cluster))), sep = "")
# Separate by clusters.
for (i in 1:(max(unique(tr$cluster))))
{
cl[, i] <- c(as.character(tr[tr$cluster == i, "variable"]),
rep(NA, length(cl[,i]) - dim(tr[tr$cluster == i, ])[1]))
}
# Write csv of cluster dataframe.
#cl <- cl[, -2]
#write.csv(cl, "clusters.csv")
cmax <- 0
# Look at dim of each cluster
for (i in 1:(max(unique(tr$cluster))))
{
if (length(cl[,i]) - sum(is.na(cl[,i])) > cmax){
cmax <- length(cl[,i]) - sum(is.na(cl[,i]))
}
}
# Note: 488 is the maximum cluster size. (x2 for replicates is 976)
cmax <- cmax * 2
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,1]) - sum(is.na(cl[,1]))), 1]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module, M1.
m1 <- gather(c1, Gene, M1, -TP, -Trmt)
# Order m1 dataframe by Timepoint and int.
m1 <- m1[with(m1, order(TP, Trmt)), ]
# Group by time point and treatment.
m1 <- m1 %>% group_by(TP, Trmt)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
m1 <- sample_n(m1, cmax, replace = T)
# Convert to data.frame.
m1 <- as.data.frame(m1)
# Loop through remaining clusters.
for (i in 3:(dim(cl)[2]))
{
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,i]) - sum(is.na(cl[,i]))), i]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module
module <- gather(c1, Gene, M, -TP, -Trmt)
# Order module dataframe by Timepoint and int.
module <- module[with(module, order(TP, Trmt)), ]
# Group by time point and treatment.
module <- module %>% group_by(TP, Trmt)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
module <- sample_n(module, cmax, replace = T)
# Rename M to match module number.
colnames(module)[which(colnames(module) == "M")] <- paste("M", i, sep = "")
# Convert to data.frame.
module <- as.data.frame(module)
# Combine into full dataframe.
m1 <- cbind(m1, module[c("Gene", paste("M", i, sep = ""))])
}
# Remove unneccesary dataframes.
rm(tr)
#### Pheno.
# Read in phenotype file.
Pheno <- read.csv(file = "PhenoBrassicaImp.csv", row.names = 1)
# Rename SM... to get rid of periods.
colnames(Pheno)[8] <- "SM"
# Add a column for Time of Day, named TOD.
Pheno$TOD <- rep(c(7, 11, 15, 19, 23, 3), each = 24, 2)
#### Discretize data.
# Discretize the phenotype data, excluding Fv.Fm.
phenoDisc <- discretize(Pheno[, 3:8],
method = "interval",
breaks = c(5, 5, 3, 5, 5, 5))
# Add INT column to discretized data.
phenoDisc$INT <- as.factor(Pheno$Treatment)
# Add Timepoint column to discretized data.
phenoDisc$TP <- as.factor(Pheno$Timepoint)
# Order Pheno dataframe by Timepoint and int.
phenoDisc <- phenoDisc[with(phenoDisc, order(TP, INT)), ]
# Remove unnecesary dataframes.
rm(Pheno)
# To get phenotype data to be of the same length as the RNA data,
# group by time point and treatment and randomly sample from each section.
# Group by time point and treatment.
Pheno <- phenoDisc %>% group_by(TP, INT)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
Pheno <- sample_n(Pheno, cmax, replace = T)
# Convert to data.frame.
Pheno <- as.data.frame(Pheno)
# Combine pheno and RNA data frames.
rnaPheno <- cbind(Pheno, m1)
# Remove unneccesary dataframes.
rm(discRNA)
rm(phenoDisc)
rm(Pheno)
# Remove extra columns.
rnaPheno$Trmt <- NULL
rnaPheno$INT <- NULL
rnaPheno$TP <- NULL
rnaPheno$TP <- NULL
# Subset training data and set aside test data.
# To subset 10% of the data, we need to randomly select 30 samples
# to use as test data.
set.seed(3)
testData <- sample(1:dim(rnaPheno)[1], round(dim(rnaPheno)[1]*.1), replace = F)
# Subset test data.
test <- rnaPheno[testData, ]
# Isolate test data from training data.
training <- rnaPheno[-testData, ]
# Remove Gene column from rnaPheno.
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
rm(m1)
rm(module)
rm(cl)
rm(c1)
rm(rnaPheno)
rm(ph)
rm(cmax)
rm(testData)
training[, 7:dim(training)[2]] <- lapply(training[, 7:dim(training)[2]], factor)
bn <- suppressWarnings(tabu(training, score = "bde",
iss = 100, tabu = 150))
plot(bn)
?random.graph
nodes <- names(training)
start <- random.graph(nodes = nodes, method = "ic-dag", num = 100,
every = 3)
netlist <- suppressWarnings(lapply(start, function(net){
tabu(training, score = "bde", tabu = 50, iss = 100)
}))
rnd <- custom.strength(netlist, nodes = nodes)
modelAvg <- rnd[(rnd$strength > .85) & (rnd$direction >= .5), ]
avg.start <- averaged.network(rnd, threshold = .85)
plot(avg.start)
View(modelAvg)
netlist <- suppressWarnings(lapply(start, function(net){
tabu(training, score = "bde", tabu = 50, iss = 50)
}))
rnd <- custom.strength(netlist, nodes = nodes)
modelAvg <- rnd[(rnd$strength > .85) & (rnd$direction >= .5), ]
avg.start <- averaged.network(rnd, threshold = .85)
plot(avg.start)
warnings()
netlist <- suppressWarnings(lapply(start, function(net){
tabu(training, score = "bde", tabu = 50, iss = 75)
}))
rnd <- custom.strength(netlist, nodes = nodes)
modelAvg <- rnd[(rnd$strength > .85) & (rnd$direction >= .5), ]
avg.start <- averaged.network(rnd, threshold = .85)
plot(avg.start)
bn <- suppressWarnings(tabu(training, score = "bde",
iss = 50, tabu = 150))
plot(bn)
nodes <- names(training)
start <- random.graph(nodes = nodes, method = "ic-dag", num = 100,
every = 3)
netlist <- suppressWarnings(lapply(start, function(net){
tabu(training, score = "bde", tabu = 50, iss = 75)
}))
rnd <- custom.strength(netlist, nodes = nodes)
modelAvg <- rnd[(rnd$strength > .85) & (rnd$direction >= .5), ]
avg.start <- averaged.network(rnd, threshold = .85)
plot(avg.start)
netlist <- suppressWarnings(lapply(start, function(net){
tabu(training, score = "bde", tabu = 100, iss = 50)
}))
rnd <- custom.strength(netlist, nodes = nodes)
modelAvg <- rnd[(rnd$strength > .85) & (rnd$direction >= .5), ]
avg.start <- averaged.network(rnd, threshold = .85)
plot(avg.start)
?random.graph
nodes <- names(training)
start <- random.graph(nodes = nodes, method = "melancon", num = 100,
every = 3)
netlist <- suppressWarnings(lapply(start, function(net){
tabu(training, score = "bde", tabu = 100, iss = 50)
}))
rnd <- custom.strength(netlist, nodes = nodes)
modelAvg <- rnd[(rnd$strength > .85) & (rnd$direction >= .5), ]
avg.start <- averaged.network(rnd, threshold = .85)
plot(avg.start)
data("alarm")
alarm$CVP
x <- as.factor(sample(1:3, 100))
x <- as.factor(sample(1:3, 100, replace = T))
rm(alarm)
hist(factor)
hist(as.numeric(x))
x <- as.factor(rep(c(1, 2, 3), each = 50))
x
sample(1:3, replace = T, prob = .8)
sample(1:3, 50, replace = T, prob = .8)
?sample
sample(1:3, 50, replace = T, prob = c(.7, .2, .1))
y <- as.factor(c(sample(1:3, 50, replace = T, prob = c(.7, .2, .1)),
sample(2:4, 50, replace = T, prob = c(.4, .5, .1)),
sample(7:9, 50, replace = T, prob = c(.3, .3, .4))))
length(y)
bn <- tabu(training, score = "bde",
iss = 10, tabu = 50)
net <- data.frame(x, y)
View(net)
bn <- tabu(net, score = "bde",
iss = 10, tabu = 50)
plot(bn)
fit <- bn.fit(bn, method = "bayes")
fit <- bn.fit(bn, net, method = "bayes")
bn.fit.barchart(fit$y)
fit$y
bn <- tabu(net, score = "bde", iss = 100, tabu = 50)
plot(bn)
?bn.fit
z <- as.factor(c(sample(3:5, 100, replace = T, prob = c(.2, .6, .2)),
sample(6:8, 50, replace = T, prob = c(.5, .1, .4))))
net <- data.frame(x, y, z)
bn <- tabu(net, score = "bde", iss = 10, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
bn.fit.barchart(fit$y)
fit$y
bn.fit.barchart(fit$z)
fit$z
bn <- tabu(net, score = "bde", iss = 15, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
bn.fit.barchart(fit$y)
fit$y
bn.fit.barchart(fit$z)
fit$z
bn <- tabu(net, score = "bde", iss = 10, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
bn.fit.barchart(fit$y)
fit$y
bn.fit.barchart(fit$z)
fit$z
bn <- tabu(net, score = "bde", iss = 20, tabu = 50)
fit <- bn.fit(bn, net, method = "bayes")
fit$z
bn <- tabu(net, score = "bde", iss = 20, tabu = 50)
plot(bn)
bn <- tabu(net, score = "bde", iss = 20, tabu = 50)
plot(bn)
bn <- tabu(net, score = "bde", iss = 15, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
fit$z
bn.fit.barchart(fit$z)
w <- as.factor(rep(c(0, 1), each = c(100, 50)))
?rep
w <- as.factor(rep(c(0, 1), times = c(100, 50)))
w
x <- as.factor(rep(c(1, 2, 3), each = 50))
y <- as.factor(c(sample(1:3, 50, replace = T, prob = c(.7, .2, .1)),
sample(2:4, 50, replace = T, prob = c(.4, .5, .1)),
sample(7:9, 50, replace = T, prob = c(.3, .3, .4))))
z <- as.factor(c(sample(3:5, 100, replace = T, prob = c(.2, .6, .2)),
sample(6:8, 50, replace = T, prob = c(.5, .1, .4))))
net <- data.frame(w, x, y, z)
bn <- tabu(net, score = "bde", iss = 10, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
bn.fit.barchart(fit$y)
bn.fit.barchart(fit$w)
bn <- tabu(net, score = "bde", iss = 5, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
bn.fit.barchart(fit$y)
View(net)
w <- as.factor(rep(c(0, 1), times = c(100, 50)))
x <- as.factor(rep(c(1, 2, 3), each = 50))
y <- as.factor(c(sample(1:3, 50, replace = T, prob = c(.7, .2, .1)),
sample(2:4, 50, replace = T, prob = c(.4, .5, .1)),
sample(7:9, 50, replace = T, prob = c(.3, .3, .4))))
net <- data.frame(w, x, y)
bn <- tabu(net, score = "bde", iss = 5, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
bn.fit.barchart(fit$y)
fit$y
fit$y
bn.fit.barchart(fit$x)
bn.fit.barchart(fit$x)
fit$x
View(net)
w <- as.factor(rep(c(0, 1), times = c(100, 50)))
x <- as.factor(rep(c(1, 2, 3), each = 50))
y <- as.factor(c(sample(1:3, 50, replace = T, prob = c(.7, .2, .1)),
sample(2:4, 50, replace = T, prob = c(.4, .5, .1)),
sample(7:9, 50, replace = T, prob = c(.3, .3, .4))))
net <- data.frame(w, x, y)
bn <- tabu(net, score = "bde", iss = 10, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
bn.fit.barchart(fit$y)
fit$y
bn.fit.barchart(fit$w)
bn <- tabu(net, score = "bde", iss = 5, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
bn.fit.barchart(fit$y)
fit$y
bn.fit.barchart(fit$x)
fit$x
?bn.fit
?rnorm
x <- rnorm(150, mean = 5, sd = 3)
y <- rnorm(150, mean = 7, sd = 2)
z <- rnorm(150, mean = 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, score = "bde", iss = 10, tabu = 50)
?tabu
bn <- tabu(net, iss = 10, tabu = 50)
bn <- tabu(net, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
bn <- tabu(net, tabu = 50)
plot(bn)
y <- rnorm(150, mean = 5, sd = 2)
z <- rnorm(150, mean = 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
y <- rnorm(150, mean = x + 5, sd = 2)
z <- rnorm(150, mean = 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
z <- rnorm(150, mean = x - 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
z <- rnorm(150, mean = x - y + 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "bayes")
?bn.fit
fit <- bn.fit(bn, net, method = "mle")
bn.fit.barchart(fit$y)
fit$y
bn.fit.histogram(fit$y)
z <- rnorm(150, mean = x - 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "mle")
bn.fit.histogram(fit$y)
fit$y
bn.net
?bn.net
fit$y
bn.fit.qqplot(fit)
bn.fit.histogram(fit)
bn.fit.xyplot(fit)
x <- rnorm(150, mean = 5, sd = 3)
y <- rnorm(150, mean = x + 5, sd = 2)
z <- rnorm(150, mean = x - y + 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
z <- rnorm(150, mean = x - 3y + 3, sd = 1)
net <- data.frame(x, y, z)
z <- rnorm(150, mean = x - 3*y + 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
z <- rnorm(150, mean = x - y^2 + 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
z <- rnorm(150, mean = y + 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
bn <- tabu(net, tabu = 50)
plot(bn)
x <- rnorm(150, mean = 5, sd = 3)
y <- rnorm(150, mean = x + 5, sd = 2)
z <- rnorm(150, mean = y + 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
z <- rnorm(150, mean = y + 1, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "mle")
fit$y
z <- rnorm(150, mean = x - 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "mle")
fit$y
fit$z
x <- rnorm(150, mean = 5, sd = 3)
y <- rnorm(150, mean = x + 5, sd = 2)
z <- rnorm(150, mean = x - 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "mle")
x <- rnorm(150, mean = 5, sd = 3)
y <- rnorm(150, mean = x + 5, sd = 2)
z <- rnorm(150, mean = x - 3, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "mle")
fit$y
x <- rnorm(150, mean = 5, sd = 3)
y <- rnorm(150, mean = x + 5, sd = 2)
z <- rnorm(150, mean = y + 1, sd = 1)
net <- data.frame(x, y, z)
bn <- tabu(net, tabu = 50)
plot(bn)
fit <- bn.fit(bn, net, method = "mle")
fit$y
7*12
?dist
library(bayesMCClust)
oldDir <- getwd()
curDir <- tempdir()
setwd(curDir)
if ( !file.exists("bayesMCClust-wd") ) dir.create("bayesMCClust-wd")
setwd("bayesMCClust-wd")
myOutfilesDir <- "mcClust-Example-Outfiles"
data(MCCExampleData)
dataFile=MCCExampleData$Njk.i
dataFile
library(bnlearn)
library(stringr)
library(dplyr)
library(tidyr)
degenes <- read.csv(file.choose(), row.names = 1)
View(degenes)
View(degenes)
View(degenes)
View(degenes)
Pheno <- read.csv(file = "PhenoBrassicaImp.csv", row.names = 1)
View(degenes)
RNA <- as.data.frame(t(RNA))
RNA <- read.csv(file = "largeDE.csv", row.names = 1)
getwd()
setwd("~/Documents/GitHub/brassicaDroughtBN")
RNA <- read.csv(file = "largeDE.csv", row.names = 1)
RNA <- as.data.frame(t(RNA))
discRNA <- discretize(RNA, method = "quantile", breaks = 3)
for (i in 1:dim(discRNA)[2]){
levels(discRNA[, i]) <- c(-1, 0, 1)
discRNA[, i] <- as.numeric(as.character(discRNA[, i]))
}
discRNA <- t(discRNA)
f <- t(discRNA)
Replicates <- rep(c(1:24), each = 2)
f <- cbind(f, Replicates)
f <- as.data.table(f)
g <- f[, lapply(.SD, mean), by = "Replicates"]
g <- g[, -1]
g <- t(g)
c <- unique(g)
rm(g)
rm(c)
g <- f[, lapply(.SD, mean), by = "Replicates"]
g <- g[, -1]
g <- t(g)
View(g)
hcg <- hclust(dist(g, method = "DTW"))
library(dtw)
install.packages("dtw")
library(dtw)
install.packages("proxy")
library(proxy)
install.packages("TSclust")
library(TSclust)
x <- cumsum(rnorm(100))
y <- cumsum(rnorm(100))
x
y
diss.EUCL(x, y)
library(TSclust)
diss.EUCL(x, y)
