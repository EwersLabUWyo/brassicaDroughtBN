colnames(discRNA) <- paste(discRNA[dim(discRNA)[1] - 1,],
discRNA[dim(discRNA)[1],], sep = "")
# Read in cluster classification.
tr <- read.csv(file = "pg.csv")
# Rename column names to "variable" and "cluster."
colnames(tr) <- c("variable", "cluster")
# Remove phenotype variables.
ph <- c("Photo", "gs", "Fv.Fm.", "Starch", "NSC", "SM")
tr <- tr[-which(tr$variable %in% ph), ]
# Create empty matrix for storing clusters.
cl <- matrix(data = NA, nrow = dim(tr)[1], ncol = (max(unique(tr$cluster))))
colnames(cl) <- paste("c", 1:(max(unique(tr$cluster))), sep = "")
# Separate by clusters.
for (i in 1:(max(unique(tr$cluster))))
{
cl[, i] <- c(as.character(tr[tr$cluster == i, "variable"]),
rep(NA, length(cl[,i]) - dim(tr[tr$cluster == i, ])[1]))
}
cmax <- 0
# Look at dim of each cluster
for (i in 1:(max(unique(tr$cluster))))
{
if (length(cl[,i]) - sum(is.na(cl[,i])) > cmax){
cmax <- length(cl[,i]) - sum(is.na(cl[,i]))
}
}
# Note: 488 is the maximum cluster size. (x2 for replicates is 976)
cmax <- cmax * 2
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,1]) - sum(is.na(cl[,1]))), 1]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module, M1.
m1 <- gather(c1, Gene, M1, -TP, -Trmt)
# Order m1 dataframe by Timepoint and int.
m1 <- m1[with(m1, order(TP, Trmt)), ]
# Group by time point and treatment.
m1 <- m1 %>% group_by(TP, Trmt)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
m1 <- sample_n(m1, cmax, replace = T)
# Convert to data.frame.
m1 <- as.data.frame(m1)
# Loop through remaining clusters.
for (i in 3:(dim(cl)[2]))
{
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,i]) - sum(is.na(cl[,i]))), i]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module
module <- gather(c1, Gene, M, -TP, -Trmt)
# Order module dataframe by Timepoint and int.
module <- module[with(module, order(TP, Trmt)), ]
# Group by time point and treatment.
module <- module %>% group_by(TP, Trmt)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
module <- sample_n(module, cmax, replace = T)
# Rename M to match module number.
colnames(module)[which(colnames(module) == "M")] <- paste("M", i, sep = "")
# Convert to data.frame.
module <- as.data.frame(module)
# Combine into full dataframe.
m1 <- cbind(m1, module[paste("M", i, sep = "")])
}
# Remove unneccesary dataframes.
rm(RNA)
rm(rnaNames)
#### Pheno.
# Read in phenotype file.
Pheno <- read.csv(file = "PhenoBrassicaImp.csv", row.names = 1)
# Rename SM... to get rid of periods.
colnames(Pheno)[8] <- "SM"
# Add a column for Time of Day, named TOD.
Pheno$TOD <- rep(c(7, 11, 15, 19, 23, 3), each = 24, 2)
#### Discretize data.
# Discretize the phenotype data, excluding Fv.Fm.
phenoDisc <- discretize(Pheno[, 3:8],
method = "interval",
breaks = c(5, 5, 3, 5, 5, 5))
# Add INT column to discretized data.
phenoDisc$INT <- as.factor(Pheno$Treatment)
# Add Timepoint column to discretized data.
phenoDisc$TP <- as.factor(Pheno$Timepoint)
# Order Pheno dataframe by Timepoint and int.
phenoDisc <- phenoDisc[with(phenoDisc, order(TP, INT)), ]
# Remove unnecesary dataframes.
rm(Pheno)
# To get phenotype data to be of the same length as the RNA data,
# group by time point and treatment and randomly sample from each section.
# Group by time point and treatment.
Pheno <- phenoDisc %>% group_by(TP, INT)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
Pheno <- sample_n(Pheno, cmax, replace = T)
# Convert to data.frame.
Pheno <- as.data.frame(Pheno)
# Combine pheno and RNA data frames.
rnaPheno <- cbind(Pheno, m1)
# Remove unneccesary dataframes.
rm(discRNA)
rm(phenoDisc)
rm(Pheno)
# Remove extra columns.
rnaPheno$Trmt <- NULL
rnaPheno$INT <- NULL
rnaPheno$TP <- NULL
rnaPheno$TP <- NULL
# Subset training data and set aside test data.
# To subset 10% of the data, we need to randomly select 30 samples
# to use as test data.
set.seed(3)
testData <- sample(1:dim(rnaPheno)[1], round(dim(rnaPheno)[1]*.1), replace = F)
# Subset test data.
test <- rnaPheno[testData, ]
# Isolate test data from training data.
training <- rnaPheno[-testData, ]
# Remove Gene column from rnaPheno.
rnaPheno$Gene <- NULL
#
RNA <- read.csv(file = "largeDE.csv", row.names = 1)
## Transpose data.
RNA <- t(RNA)
# Convert to data.frame.
RNA <- as.data.frame(RNA)
# Discretize the data.
discRNA <- discretize(RNA, method = "quantile", breaks = 3)
# Split rownames into Treatment/Timepoint and Replicate.
rnaNames <- str_split_fixed(rownames(RNA), '_', 2)
# Create a Timepoint column.
discRNA$Timepoint <- as.numeric(str_split_fixed(rnaNames[, 1], '', 2)[, 2])
# Create a treatment column named int.
discRNA$int <- as.factor(str_split_fixed(rnaNames[, 1], '', 2)[, 1])
# Order RNA dataframe by Timepoint and int.
discRNA <- discRNA[with(discRNA, order(Timepoint, int)), ]
# Convert data intervals to -1, 0, and 1 representing low, medium, and high.
for (i in 1:(dim(discRNA)[2] - 2)){
levels(discRNA[, i]) <- c(-1, 0, 1)
discRNA[, i] <- as.factor(discRNA[, i])
}
View(discRNA)
# Transform RNA data frame.
discRNA <- t(discRNA)
# Rename column names to match timepoint and treatment.
colnames(discRNA) <- paste(discRNA[dim(discRNA)[1] - 1,],
discRNA[dim(discRNA)[1],], sep = "")
# Read in cluster classification.
tr <- read.csv(file = "pg.csv")
# Rename column names to "variable" and "cluster."
colnames(tr) <- c("variable", "cluster")
# Remove phenotype variables.
ph <- c("Photo", "gs", "Fv.Fm.", "Starch", "NSC", "SM")
tr <- tr[-which(tr$variable %in% ph), ]
# Create empty matrix for storing clusters.
cl <- matrix(data = NA, nrow = dim(tr)[1], ncol = (max(unique(tr$cluster))))
colnames(cl) <- paste("c", 1:(max(unique(tr$cluster))), sep = "")
# Separate by clusters.
for (i in 1:(max(unique(tr$cluster))))
{
cl[, i] <- c(as.character(tr[tr$cluster == i, "variable"]),
rep(NA, length(cl[,i]) - dim(tr[tr$cluster == i, ])[1]))
}
cmax <- 0
# Look at dim of each cluster
for (i in 1:(max(unique(tr$cluster))))
{
if (length(cl[,i]) - sum(is.na(cl[,i])) > cmax){
cmax <- length(cl[,i]) - sum(is.na(cl[,i]))
}
}
# Note: 488 is the maximum cluster size. (x2 for replicates is 976)
cmax <- cmax * 2
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,1]) - sum(is.na(cl[,1]))), 1]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module, M1.
m1 <- gather(c1, Gene, M1, -TP, -Trmt)
# Order m1 dataframe by Timepoint and int.
m1 <- m1[with(m1, order(TP, Trmt)), ]
# Group by time point and treatment.
m1 <- m1 %>% group_by(TP, Trmt)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
m1 <- sample_n(m1, cmax, replace = T)
# Convert to data.frame.
m1 <- as.data.frame(m1)
# Loop through remaining clusters.
for (i in 3:(dim(cl)[2]))
{
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,i]) - sum(is.na(cl[,i]))), i]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module
module <- gather(c1, Gene, M, -TP, -Trmt)
# Order module dataframe by Timepoint and int.
module <- module[with(module, order(TP, Trmt)), ]
# Group by time point and treatment.
module <- module %>% group_by(TP, Trmt)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
module <- sample_n(module, cmax, replace = T)
# Rename M to match module number.
colnames(module)[which(colnames(module) == "M")] <- paste("M", i, sep = "")
# Convert to data.frame.
module <- as.data.frame(module)
# Combine into full dataframe.
m1 <- cbind(m1, module[paste("M", i, sep = "")])
}
# Remove unneccesary dataframes.
rm(RNA)
rm(rnaNames)
#### Pheno.
# Read in phenotype file.
Pheno <- read.csv(file = "PhenoBrassicaImp.csv", row.names = 1)
# Rename SM... to get rid of periods.
colnames(Pheno)[8] <- "SM"
# Add a column for Time of Day, named TOD.
Pheno$TOD <- rep(c(7, 11, 15, 19, 23, 3), each = 24, 2)
#### Discretize data.
# Discretize the phenotype data, excluding Fv.Fm.
phenoDisc <- discretize(Pheno[, 3:8],
method = "interval",
breaks = c(5, 5, 3, 5, 5, 5))
# Add INT column to discretized data.
phenoDisc$INT <- as.factor(Pheno$Treatment)
# Add Timepoint column to discretized data.
phenoDisc$TP <- as.factor(Pheno$Timepoint)
# Order Pheno dataframe by Timepoint and int.
phenoDisc <- phenoDisc[with(phenoDisc, order(TP, INT)), ]
# Remove unnecesary dataframes.
rm(Pheno)
# To get phenotype data to be of the same length as the RNA data,
# group by time point and treatment and randomly sample from each section.
# Group by time point and treatment.
Pheno <- phenoDisc %>% group_by(TP, INT)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
Pheno <- sample_n(Pheno, cmax, replace = T)
# Convert to data.frame.
Pheno <- as.data.frame(Pheno)
# Combine pheno and RNA data frames.
rnaPheno <- cbind(Pheno, m1)
# Remove unneccesary dataframes.
rm(discRNA)
rm(phenoDisc)
rm(Pheno)
# Remove extra columns.
rnaPheno$Trmt <- NULL
rnaPheno$INT <- NULL
rnaPheno$TP <- NULL
rnaPheno$TP <- NULL
# Subset training data and set aside test data.
# To subset 10% of the data, we need to randomly select 30 samples
# to use as test data.
set.seed(3)
testData <- sample(1:dim(rnaPheno)[1], round(dim(rnaPheno)[1]*.1), replace = F)
# Subset test data.
test <- rnaPheno[testData, ]
# Isolate test data from training data.
training <- rnaPheno[-testData, ]
# Remove Gene column from rnaPheno.
rnaPheno$Gene <- NULL
View(rnaPheno)
bn <- suppressWarnings(tabu(training, score = "bde", blacklist = bl,
iss = 10, tabu = 50))
View(rnaPheno)
View(training)
training$Gene <- NULL
bn <- suppressWarnings(tabu(training, score = "bde", blacklist = bl,
iss = 10, tabu = 50))
View(module)
View(training)
dim(training)
t <- as.factor(training)
t <- as.factor(training[, 7:16])
training[, 7:16]
t <- as.factor(training[, 7])
t <- as.factor(training[, 7:10])
7:dim(training)[2]
training[, 7:dim(training)[2]] <- lapply(training[, 7:dim(training)[2]], factor)
View(training)
bn <- suppressWarnings(tabu(training, score = "bde", blacklist = bl,
iss = 10, tabu = 50))
bn <- suppressWarnings(tabu(training, score = "bde",
iss = 10, tabu = 50))
plot(bn)
View(module)
View(m1)
View(module)
View(combClust)
View(module)
m1 <- cbind(m1, module[c("Gene", paste("M", i, sep = ""))])
View(m1)
RNA <- read.csv(file = "largeDE.csv", row.names = 1)
## Transpose data.
RNA <- t(RNA)
# Convert to data.frame.
RNA <- as.data.frame(RNA)
# Discretize the data.
discRNA <- discretize(RNA, method = "quantile", breaks = 3)
# Split rownames into Treatment/Timepoint and Replicate.
rnaNames <- str_split_fixed(rownames(RNA), '_', 2)
# Create a Timepoint column.
discRNA$Timepoint <- as.numeric(str_split_fixed(rnaNames[, 1], '', 2)[, 2])
# Create a treatment column named int.
discRNA$int <- as.factor(str_split_fixed(rnaNames[, 1], '', 2)[, 1])
# Order RNA dataframe by Timepoint and int.
discRNA <- discRNA[with(discRNA, order(Timepoint, int)), ]
# Convert data intervals to -1, 0, and 1 representing low, medium, and high.
for (i in 1:(dim(discRNA)[2] - 2)){
levels(discRNA[, i]) <- c(-1, 0, 1)
discRNA[, i] <- as.factor(discRNA[, i])
}
# Transform RNA data frame.
discRNA <- t(discRNA)
# Rename column names to match timepoint and treatment.
colnames(discRNA) <- paste(discRNA[dim(discRNA)[1] - 1,],
discRNA[dim(discRNA)[1],], sep = "")
# Read in cluster classification.
tr <- read.csv(file = "pg.csv")
# Rename column names to "variable" and "cluster."
colnames(tr) <- c("variable", "cluster")
# Remove phenotype variables.
ph <- c("Photo", "gs", "Fv.Fm.", "Starch", "NSC", "SM")
tr <- tr[-which(tr$variable %in% ph), ]
# Create empty matrix for storing clusters.
cl <- matrix(data = NA, nrow = dim(tr)[1], ncol = (max(unique(tr$cluster))))
colnames(cl) <- paste("c", 1:(max(unique(tr$cluster))), sep = "")
# Separate by clusters.
for (i in 1:(max(unique(tr$cluster))))
{
cl[, i] <- c(as.character(tr[tr$cluster == i, "variable"]),
rep(NA, length(cl[,i]) - dim(tr[tr$cluster == i, ])[1]))
}
cmax <- 0
# Look at dim of each cluster
for (i in 1:(max(unique(tr$cluster))))
{
if (length(cl[,i]) - sum(is.na(cl[,i])) > cmax){
cmax <- length(cl[,i]) - sum(is.na(cl[,i]))
}
}
# Note: 488 is the maximum cluster size. (x2 for replicates is 976)
cmax <- cmax * 2
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,1]) - sum(is.na(cl[,1]))), 1]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module, M1.
m1 <- gather(c1, Gene, M1, -TP, -Trmt)
# Order m1 dataframe by Timepoint and int.
m1 <- m1[with(m1, order(TP, Trmt)), ]
# Group by time point and treatment.
m1 <- m1 %>% group_by(TP, Trmt)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
m1 <- sample_n(m1, cmax, replace = T)
# Convert to data.frame.
m1 <- as.data.frame(m1)
# Loop through remaining clusters.
for (i in 3:(dim(cl)[2]))
{
# Separate clusters to form gene modules.
c1 <- discRNA[c(cl[1:(length(cl[,i]) - sum(is.na(cl[,i]))), i]), ]
# Add timepoint and treatment row.
c1 <- rbind(c1, TP = discRNA[dim(discRNA)[1] - 1,], Trmt = discRNA[dim(discRNA)[1],])
# Transpose.
c1 <- as.data.frame(t(c1))
# Gather all genes into one gene module
module <- gather(c1, Gene, M, -TP, -Trmt)
# Order module dataframe by Timepoint and int.
module <- module[with(module, order(TP, Trmt)), ]
# Group by time point and treatment.
module <- module %>% group_by(TP, Trmt)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
module <- sample_n(module, cmax, replace = T)
# Rename M to match module number.
colnames(module)[which(colnames(module) == "M")] <- paste("M", i, sep = "")
# Convert to data.frame.
module <- as.data.frame(module)
# Combine into full dataframe.
m1 <- cbind(m1, module[c("Gene", paste("M", i, sep = ""))])
}
# Remove unneccesary dataframes.
rm(RNA)
rm(rnaNames)
#### Pheno.
# Read in phenotype file.
Pheno <- read.csv(file = "PhenoBrassicaImp.csv", row.names = 1)
# Rename SM... to get rid of periods.
colnames(Pheno)[8] <- "SM"
# Add a column for Time of Day, named TOD.
Pheno$TOD <- rep(c(7, 11, 15, 19, 23, 3), each = 24, 2)
#### Discretize data.
# Discretize the phenotype data, excluding Fv.Fm.
phenoDisc <- discretize(Pheno[, 3:8],
method = "interval",
breaks = c(5, 5, 3, 5, 5, 5))
# Add INT column to discretized data.
phenoDisc$INT <- as.factor(Pheno$Treatment)
# Add Timepoint column to discretized data.
phenoDisc$TP <- as.factor(Pheno$Timepoint)
# Order Pheno dataframe by Timepoint and int.
phenoDisc <- phenoDisc[with(phenoDisc, order(TP, INT)), ]
# Remove unnecesary dataframes.
rm(Pheno)
# To get phenotype data to be of the same length as the RNA data,
# group by time point and treatment and randomly sample from each section.
# Group by time point and treatment.
Pheno <- phenoDisc %>% group_by(TP, INT)
# Randomly sample maximum module size * 2 (two replicates; cmax)
# for each time point and treatment.
Pheno <- sample_n(Pheno, cmax, replace = T)
# Convert to data.frame.
Pheno <- as.data.frame(Pheno)
# Combine pheno and RNA data frames.
rnaPheno <- cbind(Pheno, m1)
# Remove unneccesary dataframes.
rm(discRNA)
rm(phenoDisc)
rm(Pheno)
# Remove extra columns.
rnaPheno$Trmt <- NULL
rnaPheno$INT <- NULL
rnaPheno$TP <- NULL
rnaPheno$TP <- NULL
View(m1)
set.seed(3)
testData <- sample(1:dim(rnaPheno)[1], round(dim(rnaPheno)[1]*.1), replace = F)
test <- rnaPheno[testData, ]
View(tr)
View(test)
View(test)
training <- rnaPheno[-testData, ]
training$Gene <- NULL
View(training)
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
View(training)
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
training$Gene <- NULL
View(training)
training[, 7:dim(training)[2]] <- lapply(training[, 7:dim(training)[2]], factor)
bn <- suppressWarnings(tabu(training, score = "bde",
iss = 10, tabu = 50))
plot(bn)
rm(combClust)
rm(c1)
rm(t)
bn.mle <- bn.fit(bn, training, method = "bayes")
bn.fit.barchart(bn.mle$Photo, xlab = "P()")
bn.mle$Photo
bn.fit.barchart(bn.mle$M8, xlab = "P()")
bn.mle$M8
View(m1)
View(cl)
cl <- cl[, -2]
View(cl)
write.csv(cl, "clusters.csv")
library(data.table)
library(stringr)
geneAnnot <- fread(file = "/Users/mblai/Documents/Brapa_197_annotation_info.txt",
header = F)
geneAnnot <- fread(file = "/Users/mblai/Documents/Brapa_197_annotation_info.txt",
header = F)
geneAnnot <- as.data.frame(geneAnnot)
rownames(geneAnnot) <- geneAnnot$V1
View(geneAnnot)
clust <- read.csv(file = "clusters.csv",
stringsAsFactors = F)
View(clust)
View(clust)
clust <- read.csv(file = "clusters.csv",
stringsAsFactors = F, row.names = 1)
View(clust)
View(clust)
View(clust)
clust <- clust$c1
commas <- str_subset(clust, ",")
sepCommas <- unlist(str_split(commas, ","))
clust <- read.csv(file = "clusters.csv",
stringsAsFactors = F, row.names = 1)
clusters <- read.csv(file = "clusters.csv",
stringsAsFactors = F, row.names = 1)
clust <- clust$c1
commas <- str_subset(clust, ",")
sepCommas <- unlist(str_split(commas, ","))
clust <- setdiff(clust, commas)
clust
View(clusters)
clust <- c(clust, sepCommas)
geneAnnot <- geneAnnot[clust, ]
View(geneAnnot)
