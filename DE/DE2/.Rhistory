t <- seq(1:12)
plot(t, avgPheno[avgPheno$Treatment == "Dry", "Photo"], type = 'o', ylab = 'Photo', lty = 2)
lines(t, avgPheno[avgPheno$Treatment == "WW", "Photo"], type = 'o')
plot(t, avgPheno[avgPheno$Treatment == "Dry", "gs"], type = 'o', ylab = 'gs', lty = 2)
lines(t, avgPheno[avgPheno$Treatment == "WW", "gs"], type = 'o')
plot(t, avgPheno[avgPheno$Treatment == "Dry", "FvFm"], type = 'o', ylab = 'FvFm', ylim = c(.65, .8), lty = 2)
lines(t, avgPheno[avgPheno$Treatment == "WW", "FvFm"], type = 'o')
plot(t, avgPheno[avgPheno$Treatment == "Dry", "Starch"], type = 'o', ylab = 'Starch', lty = 2)
lines(t, avgPheno[avgPheno$Treatment == "WW", "Starch"], type = 'o')
plot(t, avgPheno[avgPheno$Treatment == "WW", "NSC"], type = 'o', ylab = 'NSC', lty = 2)
lines(t, avgPheno[avgPheno$Treatment == "Dry", "NSC"], type = 'o')
plot(t, avgPheno[avgPheno$Treatment == "WW", "SM"], type = 'o', ylab = 'SM', ylim = c(10, 40))
lines(t, avgPheno[avgPheno$Treatment == "Dry", "SM"], type = 'o', lty = 2)
library(data.table)
library(stringr)
geneAnnot <- fread(file = "/Users/mblai/Documents/Brapa_197_annotation_info.txt",
header = F)
geneAnnot <- as.data.frame(geneAnnot)
rownames(geneAnnot) <- geneAnnot$V1
setwd("~/Documents/GitHub/brassicaDroughtBN")
setwd("~/Documents/GitHub/brassicaDroughtBN/DE")
clusters <- read.csv(file = "DE01mod.csv",
stringsAsFactors = F, row.names = 1)
clust <- stack(clusters)
clust <- clust[!is.na(clust$values), ]
clust$ind <- as.numeric(str_split_fixed(clust$ind, "V", 2)[, 2])
commas <- data.frame(Gene = str_subset(clust$values, ","),
Clust = clust[str_detect(clust$values, ",") == T, 2])
sepCommas <- unlist(str_split(commas$Gene, ","))
dup <- sepCommas[duplicated(sepCommas) == T]
sepCommas <- sepCommas[!sepCommas %in% dup]
sepCommas <- sepCommas[!sepCommas %in% clust$value]
commaDF <- data.frame(values = rep(NA, length(sepCommas)), ind = rep(NA, length(sepCommas)))
for (i in 1:length(sepCommas)){
commaDF[i, 1] <- sepCommas[i]
commaDF[i, 2] <- as.character(clust[str_detect(clust$values, sepCommas[i]) == T, 2])
}
clust <- clust[clust$values %in% setdiff(clust$values, commas$Gene), ]
clust <- rbind(clust, commaDF)
clustAnnot <- geneAnnot[clust$values, ]
clustAnnot$Cluster <- cbind(as.character(clust$ind))
clustAnnot[commaDF[,1], 1] <- paste(clustAnnot[commaDF[,1], 1], "*", sep = "")
clustAnnot$Cluster <- as.numeric(clustAnnot$Cluster[, 1])
clustAnnot <- clustAnnot[order(clustAnnot$Cluster), ]
clustAnnot <- clustAnnot[-c(which(is.na(clustAnnot$V1) == T)), ]
View(clustAnnot)
which(clustAnnot$V1 == "NA*")
clustAnnot <- clustAnnot[-c(which(clustAnnot$V1 == "NA*")), ]
View(clustAnnot)
write.csv(clustAnnot, file = "DE01GeneAnnot.csv")
rm(commas)
rm(commaDF)
rm(clusters)
rm(clust)
rm(geneAnnot)
rm(dup)
rm(sepCommas)
View(clustAnnot)
geneAnnot <- fread(file = "/Users/mblai/Documents/Brapa_197_annotation_info.txt",
header = F)
geneAnnot <- as.data.frame(geneAnnot)
rownames(geneAnnot) <- geneAnnot$V1
clusters <- read.csv(file = "DE01mod.csv",
stringsAsFactors = F, row.names = 1)
clust <- stack(clusters)
clust <- clust[!is.na(clust$values), ]
clust$ind <- as.numeric(str_split_fixed(clust$ind, "V", 2)[, 2])
commas <- data.frame(Gene = str_subset(clust$values, ","),
Clust = clust[str_detect(clust$values, ",") == T, 2])
sepCommas <- unlist(str_split(commas$Gene, ","))
clusters <- read.csv(file = "DE01modNoise.csv",
stringsAsFactors = F, row.names = 1)
clust <- stack(clusters)
clust <- clust[!is.na(clust$values), ]
clust$ind <- as.numeric(str_split_fixed(clust$ind, "V", 2)[, 2])
commas <- data.frame(Gene = str_subset(clust$values, ","),
Clust = clust[str_detect(clust$values, ",") == T, 2])
sepCommas <- unlist(str_split(commas$Gene, ","))
dup <- sepCommas[duplicated(sepCommas) == T]
sepCommas <- sepCommas[!sepCommas %in% dup]
sepCommas <- sepCommas[!sepCommas %in% clust$value]
commaDF <- data.frame(values = rep(NA, length(sepCommas)), ind = rep(NA, length(sepCommas)))
for (i in 1:length(sepCommas)){
commaDF[i, 1] <- sepCommas[i]
commaDF[i, 2] <- as.character(clust[str_detect(clust$values, sepCommas[i]) == T, 2])
}
clust <- clust[clust$values %in% setdiff(clust$values, commas$Gene), ]
clust <- rbind(clust, commaDF)
clustAnnot <- geneAnnot[clust$values, ]
clustAnnot$Cluster <- cbind(as.character(clust$ind))
clustAnnot[commaDF[,1], 1] <- paste(clustAnnot[commaDF[,1], 1], "*", sep = "")
clustAnnot$Cluster <- as.numeric(clustAnnot$Cluster[, 1])
clustAnnot <- clustAnnot[order(clustAnnot$Cluster), ]
clustAnnot <- clustAnnot[-c(which(is.na(clustAnnot$V1) == T)), ]
clustAnnot <- clustAnnot[-c(which(clustAnnot$V1 == "NA*")), ]
View(clustAnnot)
write.csv(clustAnnot, file = "DE01NoiseGeneAnnot.csv")
rm(commas)
rm(commaDF)
rm(clusters)
rm(clust)
rm(geneAnnot)
rm(dup)
rm(sepCommas)
clusNoise <- read.csv(file = "DE01modNoise.csv",
stringsAsFactors = F, row.names = 1)
clust <- read.csv(file = "DE01mod.csv",
stringsAsFactors = F, row.names = 1)
rm(i)
rm(clustAnnot)
clusNoise$V1 == clust$V1
clusNoise$V1 %in% clust$V1
clusNoise$V2 %in% clust$V2
clusNoise$V3 %in% clust$V2
clusNoise$V3 %in% clust$V3
clusNoise$V4 %in% clust$V4
clusNoise$V5 %in% clust$V5
clusNoise$V5 %in% clust$V6
clusNoise$V6 %in% clust$V6
length(clusNoise$V1)
length(clust$V1)
View(clusNoise)
clusNoise$V6 %in% clust$V6
clusNoise$V1 %in% clust$V1
clust$V1 %in% clusNoise$V1
lapply(clusNoise, length)
lapply(clusNoise, function(x){length(!is.na(x))})
lapply(clusNoise, function(x){length(is.na(x))})
length(is.na(clusNoise$V3))
is.na(clusNoise$V3)
!is.na(clusNoise$V3)
lapply(clusNoise, function(x){sum(!is.na(x))})
xNoise <- lapply(clusNoise, function(x){sum(!is.na(x))})
xNoise <- unlist(lapply(clusNoise, function(x){sum(!is.na(x))}))
x <- unlist(lapply(clust, function(x){sum(!is.na(x))}))
x == xNoise
View(clust)
library(BHC)
library(bnlearn)
library(data.table)
library(stringr)
library(stringi)
RNA <- read.csv(file = "DE05FPKM.csv", row.names = 1)
setwd("~/Documents/GitHub/brassicaDroughtBN/DE/DE2")
RNA <- as.data.frame(t(RNA))
RNA <- read.csv(file = "DE05FPKM.csv", row.names = 1)
RNA <- as.data.frame(t(RNA))
discRNA <- discretize(RNA, method = "interval", breaks = 3)
for (i in 1:dim(discRNA)[2]){
levels(discRNA[, i]) <- c(-1, 0, 1)
discRNA[, i] <- as.numeric(as.character(discRNA[, i]))
}
discRNA <- t(discRNA)
rm(RNA)
nDataItems <- nrow(discRNA)
nFeatures  <- ncol(discRNA)
itemLabels <- rownames(discRNA)
hct <- bhc(discRNA, itemLabels, numReps=2)
WriteOutClusterLabels(hct, "labels.txt", verbose=TRUE)
clst <- readLines("labels.txt")
clst <- paste(clst, sep = "", collapse = " ")
clstFrame = as.data.frame(do.call(rbind, str_split(clst, "---")),
stringsAsFactors=FALSE)
clstFrame <- clstFrame[, -c(seq(2, 116, 2))]
clstFrame <- clstFrame[, -1]
clstFrame <- lapply(clstFrame, function(x){str_trim(x, side = "both")})
clList <- lapply(clstFrame, function(x) {unlist(str_split(x, " "))})
m <- stri_list2matrix(clList, fill = NA)
View(m)
write.csv(m, "DE05mod.csv")
reClust <- m[, which(colSums(!is.na(m)) > 50)]
rmClust <- which(colSums(!is.na(m)) > 50)
for (i in 1:dim(reClust)[2]){
# Subset reClust genes from discRNA.
reClust <- module(i)
# Re-define data dimensions.
nDataItems <- nrow(reClust)
nFeatures  <- ncol(reClust)
# Re-define genes as item labels.
itemLabels <- rownames(reClust)
# Perform clustering with bhc function with noise mode.
hct2 <- bhc(reClust, itemLabels, numReps=2)
# Write clusters to text file.
WriteOutClusterLabels(hct2, "labelsReClust1.txt", verbose=TRUE)
# Read in the cluster output.
clst <- readLines("labelsReClust1.txt")
# Collapse into one string.
clst <- paste(clst, sep = "", collapse = " ")
# Convert string to dataframe after splitting strings
# at "---".
clstFrame = as.data.frame(do.call(rbind, str_split(clst, "---")),
stringsAsFactors=FALSE)
# Remove CLUSTER columns which are even numbered.
clstFrame <- clstFrame[, -c(seq(2, 116, 2))]
# Remove first row, which is empty.
clstFrame <- clstFrame[, -1]
# Trim whitespace from front and end of character string.
clstFrame <- lapply(clstFrame, function(x){str_trim(x, side = "both")})
# Split each column string up into a list for each cluster.
clList <- lapply(clstFrame, function(x) {unlist(str_split(x, " "))})
# Convert the list to a matrix and fill empty values with NA.
m2 <- stri_list2matrix(clList, fill = NA)
# Add rows to match rows in m.
m2 <- rbind(m2, matrix(NA, nrow = 220 - dim(m2)[1], ncol = dim(m2)[2]))
# Add to m dataframe.
m <- cbind(m, m2)
}
module <- function(x){discRNA[m[which(is.na(m[, x]) == F), x], ]}
for (i in 1:dim(reClust)[2]){
# Subset reClust genes from discRNA.
reClust <- module(i)
# Re-define data dimensions.
nDataItems <- nrow(reClust)
nFeatures  <- ncol(reClust)
# Re-define genes as item labels.
itemLabels <- rownames(reClust)
# Perform clustering with bhc function with noise mode.
hct2 <- bhc(reClust, itemLabels, numReps=2)
# Write clusters to text file.
WriteOutClusterLabels(hct2, "labelsReClust1.txt", verbose=TRUE)
# Read in the cluster output.
clst <- readLines("labelsReClust1.txt")
# Collapse into one string.
clst <- paste(clst, sep = "", collapse = " ")
# Convert string to dataframe after splitting strings
# at "---".
clstFrame = as.data.frame(do.call(rbind, str_split(clst, "---")),
stringsAsFactors=FALSE)
# Remove CLUSTER columns which are even numbered.
clstFrame <- clstFrame[, -c(seq(2, 116, 2))]
# Remove first row, which is empty.
clstFrame <- clstFrame[, -1]
# Trim whitespace from front and end of character string.
clstFrame <- lapply(clstFrame, function(x){str_trim(x, side = "both")})
# Split each column string up into a list for each cluster.
clList <- lapply(clstFrame, function(x) {unlist(str_split(x, " "))})
# Convert the list to a matrix and fill empty values with NA.
m2 <- stri_list2matrix(clList, fill = NA)
# Add rows to match rows in m.
m2 <- rbind(m2, matrix(NA, nrow = 220 - dim(m2)[1], ncol = dim(m2)[2]))
# Add to m dataframe.
m <- cbind(m, m2)
}
View(m2)
reClust <- m[, which(colSums(!is.na(m)) > 50)]
rmClust <- which(colSums(!is.na(m)) > 50)
rmClust
for (i in 1:dim(reClust)[2]){
# Subset reClust genes from discRNA.
reClust <- module(i)
# Re-define data dimensions.
nDataItems <- nrow(reClust)
nFeatures  <- ncol(reClust)
# Re-define genes as item labels.
itemLabels <- rownames(reClust)
# Perform clustering with bhc function with noise mode.
hct2 <- bhc(reClust, itemLabels, numReps=2)
# Write clusters to text file.
WriteOutClusterLabels(hct2, "labelsReClust1.txt", verbose=TRUE)
# Read in the cluster output.
clst <- readLines("labelsReClust1.txt")
# Collapse into one string.
clst <- paste(clst, sep = "", collapse = " ")
# Convert string to dataframe after splitting strings
# at "---".
clstFrame = as.data.frame(do.call(rbind, str_split(clst, "---")),
stringsAsFactors=FALSE)
# Remove CLUSTER columns which are even numbered.
clstFrame <- clstFrame[, -c(seq(2, 116, 2))]
# Remove first row, which is empty.
clstFrame <- clstFrame[, -1]
# Trim whitespace from front and end of character string.
clstFrame <- lapply(clstFrame, function(x){str_trim(x, side = "both")})
# Split each column string up into a list for each cluster.
clList <- lapply(clstFrame, function(x) {unlist(str_split(x, " "))})
# Convert the list to a matrix and fill empty values with NA.
m2 <- stri_list2matrix(clList, fill = NA)
# Add rows to match rows in m.
m2 <- rbind(m2, matrix(NA, nrow = 220 - dim(m2)[1], ncol = dim(m2)[2]))
# Add to m dataframe.
m <- cbind(m, m2)
}
View(m)
i
dim(reClust)[2]
reClust <- module(i)
View(reClust)
nDataItems <- nrow(reClust)
nFeatures  <- ncol(reClust)
itemLabels <- rownames(reClust)
hct2 <- bhc(reClust, itemLabels, numReps=2)
WriteOutClusterLabels(hct2, "labelsReClust1.txt", verbose=TRUE)
clst <- readLines("labelsReClust1.txt")
clst <- paste(clst, sep = "", collapse = " ")
clstFrame = as.data.frame(do.call(rbind, str_split(clst, "---")),
stringsAsFactors=FALSE)
clstFrame <- clstFrame[, -c(seq(2, 116, 2))]
clstFrame <- clstFrame[, -1]
View(clstFrame)
clstFrame <- lapply(clstFrame, function(x){str_trim(x, side = "both")})
clList <- lapply(clstFrame, function(x) {unlist(str_split(x, " "))})
m2 <- stri_list2matrix(clList, fill = NA)
View(m2)
m2 <- rbind(m2, matrix(NA, nrow = 220 - dim(m2)[1], ncol = dim(m2)[2]))
View(m2)
View(m)
dim(m)
m2 <- rbind(m2, matrix(NA, nrow = dim(m)[1] - dim(m2)[1], ncol = dim(m2)[2]))
(dim(m)[1] - dim(m2)[1])
(dim(m2)[1] - dim(m2)[1])
220 - dim(m2)[1]
dim(m2)[1]
m2 <- rbind(m2, matrix(NA, nrow = 153, ncol = dim(m2)[2]))
m <- cbind(m, m2)
dim(m2)[2])
dim(m2)[2]
m2 <- rbind(m2, matrix(NA, nrow = 153, ncol = dim(m2)[2]))
m <- cbind(m, m2)
View(m2)
m2 <- stri_list2matrix(clList, fill = NA)
m2 <- rbind(m2, matrix(NA, nrow = 153, ncol = dim(m2)[2]))
m2 <- stri_list2matrix(clList, fill = NA)
dim(m)[1]
dim(m)[1] - dim(m)[1]
dim(m)[1] - dim(m2)[1]
m2 <- rbind(m2, matrix(NA, nrow = dim(m)[1] - dim(m2)[1], ncol = dim(m2)[2]))
m <- cbind(m, m2)
View(m)
m <- m[, -c(46:47)]
for (i in 1:dim(reClust)[2]){
# Subset reClust genes from discRNA.
reClust <- module(i)
# Re-define data dimensions.
nDataItems <- nrow(reClust)
nFeatures  <- ncol(reClust)
# Re-define genes as item labels.
itemLabels <- rownames(reClust)
# Perform clustering with bhc function with noise mode.
hct2 <- bhc(reClust, itemLabels, numReps=2)
# Write clusters to text file.
WriteOutClusterLabels(hct2, "labelsReClust1.txt", verbose=TRUE)
# Read in the cluster output.
clst <- readLines("labelsReClust1.txt")
# Collapse into one string.
clst <- paste(clst, sep = "", collapse = " ")
# Convert string to dataframe after splitting strings
# at "---".
clstFrame = as.data.frame(do.call(rbind, str_split(clst, "---")),
stringsAsFactors=FALSE)
# Remove CLUSTER columns which are even numbered.
clstFrame <- clstFrame[, -c(seq(2, 116, 2))]
# Remove first row, which is empty.
clstFrame <- clstFrame[, -1]
# Trim whitespace from front and end of character string.
clstFrame <- lapply(clstFrame, function(x){str_trim(x, side = "both")})
# Split each column string up into a list for each cluster.
clList <- lapply(clstFrame, function(x) {unlist(str_split(x, " "))})
# Convert the list to a matrix and fill empty values with NA.
m2 <- stri_list2matrix(clList, fill = NA)
# Add rows to match rows in m.
m2 <- rbind(m2, matrix(NA, nrow = dim(m)[1] - dim(m2)[1], ncol = dim(m2)[2]))
# Add to m dataframe.
m <- cbind(m, m2)
}
m <- m[, -rmClust]
View(m)
dim(m)
unlist(lapply(m, sum(!is.na(m))))
unlist(lapply(m, function(x){sum(!is.na(x))}))
x <- unlist(lapply(m, function(x){sum(!is.na(x))}))
x
View(m)
View(m)
which(colSums(!is.na(m)) > 50)
reClust <- m[, which(colSums(!is.na(m)) > 50)]
rmClust <- which(colSums(!is.na(m)) > 50)
for (i in 1:dim(reClust)[2]){
# Subset reClust genes from discRNA.
reClust <- module(i)
# Re-define data dimensions.
nDataItems <- nrow(reClust)
nFeatures  <- ncol(reClust)
# Re-define genes as item labels.
itemLabels <- rownames(reClust)
# Perform clustering with bhc function with noise mode.
hct2 <- bhc(reClust, itemLabels, numReps=2)
# Write clusters to text file.
WriteOutClusterLabels(hct2, "labelsReClust1.txt", verbose=TRUE)
# Read in the cluster output.
clst <- readLines("labelsReClust1.txt")
# Collapse into one string.
clst <- paste(clst, sep = "", collapse = " ")
# Convert string to dataframe after splitting strings
# at "---".
clstFrame = as.data.frame(do.call(rbind, str_split(clst, "---")),
stringsAsFactors=FALSE)
# Remove CLUSTER columns which are even numbered.
clstFrame <- clstFrame[, -c(seq(2, 116, 2))]
# Remove first row, which is empty.
clstFrame <- clstFrame[, -1]
# Trim whitespace from front and end of character string.
clstFrame <- lapply(clstFrame, function(x){str_trim(x, side = "both")})
# Split each column string up into a list for each cluster.
clList <- lapply(clstFrame, function(x) {unlist(str_split(x, " "))})
# Convert the list to a matrix and fill empty values with NA.
m2 <- stri_list2matrix(clList, fill = NA)
# Add rows to match rows in m.
m2 <- rbind(m2, matrix(NA, nrow = dim(m)[1] - dim(m2)[1], ncol = dim(m2)[2]))
# Add to m dataframe.
m <- cbind(m, m2)
}
m <- m[, -rmClust]
which(colSums(!is.na(m)) > 50)
write.csv(m, "mod80moreMod.csv")
geneAnnot <- fread(file = "/Users/mblai/Documents/Brapa_197_annotation_info.txt",
header = F)
geneAnnot <- as.data.frame(geneAnnot)
rownames(geneAnnot) <- geneAnnot$V1
clusters <- read.csv(file = "DE05mod.csv",
stringsAsFactors = F, row.names = 1)
clust <- stack(clusters)
clust <- clust[!is.na(clust$values), ]
clust$ind <- as.numeric(str_split_fixed(clust$ind, "V", 2)[, 2])
commas <- data.frame(Gene = str_subset(clust$values, ","),
Clust = clust[str_detect(clust$values, ",") == T, 2])
sepCommas <- unlist(str_split(commas$Gene, ","))
dup <- sepCommas[duplicated(sepCommas) == T]
sepCommas <- sepCommas[!sepCommas %in% dup]
sepCommas <- sepCommas[!sepCommas %in% clust$value]
commaDF <- data.frame(values = rep(NA, length(sepCommas)), ind = rep(NA, length(sepCommas)))
for (i in 1:length(sepCommas)){
commaDF[i, 1] <- sepCommas[i]
commaDF[i, 2] <- as.character(clust[str_detect(clust$values, sepCommas[i]) == T, 2])
}
clust <- clust[clust$values %in% setdiff(clust$values, commas$Gene), ]
clust <- rbind(clust, commaDF)
clustAnnot <- geneAnnot[clust$values, ]
clustAnnot$Cluster <- cbind(as.character(clust$ind))
clustAnnot[commaDF[,1], 1] <- paste(clustAnnot[commaDF[,1], 1], "*", sep = "")
clustAnnot$Cluster <- as.numeric(clustAnnot$Cluster[, 1])
clustAnnot <- clustAnnot[order(clustAnnot$Cluster), ]
clustAnnot <- clustAnnot[-c(which(is.na(clustAnnot$V1) == T)), ]
clustAnnot <- clustAnnot[-c(which(clustAnnot$V1 == "NA*")), ]
write.csv(clustAnnot, file = "DE01NoiseGeneAnnot.csv")
rm(commas)
rm(commaDF)
rm(clusters)
rm(clust)
rm(geneAnnot)
rm(dup)
rm(sepCommas)
setwd("~/Documents/GitHub/brassicaDroughtBN/DE")
write.csv(clustAnnot, file = "DE05GeneAnnot.csv")
setwd("~/Documents/GitHub/brassicaDroughtBN/DE/DE2")
clusters <- read.csv(file = "mod80moreMod.csv",
stringsAsFactors = F, row.names = 1)
clust <- stack(clusters)
clust <- clust[!is.na(clust$values), ]
clust$ind <- as.numeric(str_split_fixed(clust$ind, "V", 2)[, 2])
commas <- data.frame(Gene = str_subset(clust$values, ","),
Clust = clust[str_detect(clust$values, ",") == T, 2])
sepCommas <- unlist(str_split(commas$Gene, ","))
dup <- sepCommas[duplicated(sepCommas) == T]
sepCommas <- sepCommas[!sepCommas %in% dup]
sepCommas <- sepCommas[!sepCommas %in% clust$value]
commaDF <- data.frame(values = rep(NA, length(sepCommas)), ind = rep(NA, length(sepCommas)))
for (i in 1:length(sepCommas)){
commaDF[i, 1] <- sepCommas[i]
commaDF[i, 2] <- as.character(clust[str_detect(clust$values, sepCommas[i]) == T, 2])
}
clust <- clust[clust$values %in% setdiff(clust$values, commas$Gene), ]
clust <- rbind(clust, commaDF)
clustAnnot <- geneAnnot[clust$values, ]
clustAnnot$Cluster <- cbind(as.character(clust$ind))
geneAnnot <- fread(file = "/Users/mblai/Documents/Brapa_197_annotation_info.txt",
header = F)
geneAnnot <- as.data.frame(geneAnnot)
rownames(geneAnnot) <- geneAnnot$V1
clusters <- read.csv(file = "mod80moreMod.csv",
stringsAsFactors = F, row.names = 1)
clust <- stack(clusters)
clust <- clust[!is.na(clust$values), ]
clust$ind <- as.numeric(str_split_fixed(clust$ind, "V", 2)[, 2])
commas <- data.frame(Gene = str_subset(clust$values, ","),
Clust = clust[str_detect(clust$values, ",") == T, 2])
sepCommas <- unlist(str_split(commas$Gene, ","))
dup <- sepCommas[duplicated(sepCommas) == T]
sepCommas <- sepCommas[!sepCommas %in% dup]
sepCommas <- sepCommas[!sepCommas %in% clust$value]
commaDF <- data.frame(values = rep(NA, length(sepCommas)), ind = rep(NA, length(sepCommas)))
for (i in 1:length(sepCommas)){
commaDF[i, 1] <- sepCommas[i]
commaDF[i, 2] <- as.character(clust[str_detect(clust$values, sepCommas[i]) == T, 2])
}
clust <- clust[clust$values %in% setdiff(clust$values, commas$Gene), ]
clust <- rbind(clust, commaDF)
clustAnnot <- geneAnnot[clust$values, ]
clustAnnot$Cluster <- cbind(as.character(clust$ind))
clustAnnot[commaDF[,1], 1] <- paste(clustAnnot[commaDF[,1], 1], "*", sep = "")
clustAnnot$Cluster <- as.numeric(clustAnnot$Cluster[, 1])
clustAnnot <- clustAnnot[order(clustAnnot$Cluster), ]
clustAnnot <- clustAnnot[-c(which(is.na(clustAnnot$V1) == T)), ]
clustAnnot <- clustAnnot[-c(which(clustAnnot$V1 == "NA*")), ]
View(clustAnnot)
write.csv(clustAnnot, file = "DE05GeneAnnotSmallMod.csv")
rm(commas)
rm(commaDF)
rm(clusters)
rm(clust)
rm(geneAnnot)
rm(dup)
rm(sepCommas)
